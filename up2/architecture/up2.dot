digraph structs {
   # node [shape=record];
   # struct1 [label="<f0> left|<f1> mid&#92; dle|<f2> right"];
   # struct2 [label="<f0> one|<f1> two"];
   # struct3 [label="hello&#92;nworld |{ b |{c|<here> d|e}| f}| g | h"];
   # struct1:f1 -> struct2:f0;
   # struct1:f2 -> struct3:here;

   # subgraph cluster_0 {
   # style=filled;
   # color=lightgrey;
   # node [style=filled,color=white];
   # a0 -> a1 -> a2 -> a3;
   # label = "process #1";
   # }
   # 
   # subgraph cluster_1 {
   # node [style=filled];
   # b0 -> b1 -> b2 -> b3;
   # label = "process #2";
   # color=blue
   # }
   # start -> a0;
   # start -> b0;
   # a1 -> b3;
   # b2 -> a3;
   # a3 -> a0;
   # a3 -> end;
   # b3 -> end;
   # 
   # start [shape=Mdiamond];
   # end [shape=Msquare];
   
    # Stack pointer
    sp [label="SP"]
    
    sp_plus_one [shape=circle,label="+1"];
    sp -> sp_plus_one
    sp_plus_one -> sp

    sp_minus_one [shape=circle,label="-1"];
    sp -> sp_minus_one
    sp_minus_one -> sp


    # Program counter
    pc [label="PC",shape=record] 
    
    pc_plus_one [shape=circle,label="+1"]
    pc -> pc_plus_one
    pc_plus_one -> pc_in_mux


    # Registers
    regs [label="<1> +1|<R0> R0|<R1> R1|<R2> R2|<R3> R3|<PC> PC",shape=record];

    # Muxes
    reg_in_mux [label="MUX",shape=diamond]
    reg_out_mux_1 [label="MUX",shape=diamond]
    reg_out_mux_2 [label="MUX",shape=diamond]
    pc_in_mux [label="MUX",shape=diamond] 


    # Alu
    alu [label="ALU",shape=trapezium] 


    # Mux control
    mux_ctrl[label="MUX Control", shape=record]
    mux_ctrl -> reg_in_mux
    mux_ctrl -> reg_out_mux_1
    mux_ctrl -> reg_out_mux_2

    # Wiring
    reg_in_mux -> regs:R0    
    reg_in_mux -> regs:R1
    reg_in_mux -> regs:R2

    regs:R0 -> reg_out_mux_1
    regs:R1 -> reg_out_mux_1
    regs:R2 -> reg_out_mux_1
    regs:R0 -> reg_out_mux_2
    regs:R1 -> reg_out_mux_2
    regs:R2 -> reg_out_mux_2


    reg_out_mux_1 -> alu
    reg_out_mux_2 -> alu
    
    alu -> pc_in_mux
    alu -> reg_in_mux

    pc_in_mux -> pc


    # ISA



}

